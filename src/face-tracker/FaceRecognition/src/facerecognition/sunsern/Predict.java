/**
   This class provides static methods for evaluating a jboost-trained
   classifier on new data.  This part of the code can stand by itself.

   In addition, this class includes a main which, when run, reads data
   from standard input of the same form as that used during training,
   and outputs corresponding predictions to standard output.  This
   part of the code requires other jboost classes.

   This classifier was automatically generated by jboost on
   Wed May 20 00:50:36 GMT-08:00 2009.
**/

package facerecognition.sunsern;

import java.util.*;

public class Predict{

  /**
     Evaluates this classifier on an example represented by an array
     of Objects and returns an array of scores, one for each class.
     Finite attributes must be represented by an Integer specifying
     the index of the chosen value.  Text attributes are given by a
     String.  Number attributes are represented by a Double.  In all
     cases, an undefined attribute is indicated by a null pointer.
     @param at an array of Objects corresponding to the attributes
                   specified in the spec file on which this classifier
		   was trained.  Specifically, these objects are:
<pre>
  *      index    attr.type    data.type   name
  *    ------------------------------------------
  *         0     number       Double       e1
  *         1     number       Double       e2
  *         2     number       Double       e3
  *         3     number       Double       e4
  *         4     number       Double       e5
  *         5     number       Double       e6
  *         6     number       Double       e7
  *         7     number       Double       e8
  *         8     number       Double       e9
  *         9     number       Double       e10
  *        10     number       Double       e11
  *        11     number       Double       e12
  *        12     number       Double       e13
  *        13     number       Double       e14
  *        14     number       Double       e15
  *        15     number       Double       e16
  *        16     number       Double       e17
  *        17     number       Double       e18
  *        18     number       Double       e19
  *        19     number       Double       e20
  *        20     number       Double       e21
  *        21     number       Double       e22
  *        22     number       Double       e23
  *        23     number       Double       e24
  *        24     number       Double       e25
  *        25     number       Double       e26
  *        26     number       Double       e27
  *        27     number       Double       e28
  *        28     number       Double       e29
  *        29     number       Double       e30
  *        30     number       Double       e31
  *        31     number       Double       e32
  *        32     number       Double       e33
  *        33     number       Double       e34
  *        34     number       Double       e35
  *        35     number       Double       e36
  *        36     number       Double       e37
  *        37     number       Double       e38
  *        38     number       Double       e39
  *        39     number       Double       e40
  *        40     number       Double       e41
  *        41     number       Double       e42
  *        42     number       Double       e43
  *        43     number       Double       e44
  *        44     number       Double       e45
  *        45     number       Double       e46
  *        46     number       Double       e47
  *        47     number       Double       e48
  *        48     number       Double       e49
  *        49     number       Double       e50
  *        50     number       Double       e51
  *        51     number       Double       e52
  *        52     number       Double       e53
  *        53     number       Double       e54
  *        54     number       Double       e55
  *        55     number       Double       e56
  *        56     number       Double       e57
  *        57     number       Double       e58
  *        58     number       Double       e59
  *        59     number       Double       e60
  *        60     number       Double       e61
  *        61     number       Double       e62
  *        62     number       Double       e63
  *        63     number       Double       e64
  *        64     number       Double       e65
  *        65     number       Double       e66
  *        66     number       Double       e67
  *        67     number       Double       e68
  *        68     number       Double       e69
  *        69     number       Double       e70
  *        70     number       Double       e71
  *        71     number       Double       e72
  *        72     number       Double       e73
  *        73     number       Double       e74
  *        74     number       Double       e75
  *        75     number       Double       e76
  *        76     number       Double       e77
  *        77     number       Double       e78
  *        78     number       Double       e79
  *        79     number       Double       e80
  *        80     number       Double       e81
  *        81     number       Double       e82
  *        82     number       Double       e83
  *        83     number       Double       e84
  *        84     number       Double       e85
  *        85     number       Double       e86
  *        86     number       Double       e87
  *        87     number       Double       e88
  *        88     number       Double       e89
  *        89     number       Double       e90
  *        90     number       Double       e91
  *        91     number       Double       e92
  *        92     number       Double       e93
  *        93     number       Double       e94
  *        94     number       Double       e95
  *        95     number       Double       e96
  *        96     number       Double       e97
  *        97     number       Double       e98
  *        98     number       Double       e99
  *        99     number       Double       e100
  *       100     number       Double       e101
  *       101     number       Double       e102
  *       102     number       Double       e103
  *       103     number       Double       e104
  *       104     number       Double       e105
  *       105     number       Double       e106
  *       106     number       Double       e107
  *       107     number       Double       e108
  *       108     number       Double       e109
  *       109     number       Double       e110
  *       110     number       Double       e111
  *       111     number       Double       e112
  *       112     number       Double       e113
  *       113     number       Double       e114
  *       114     number       Double       e115
  *       115     number       Double       e116
  *       116     number       Double       e117
  *       117     number       Double       e118
  *       118     number       Double       e119
  *       119     number       Double       e120
  *       120     number       Double       e121
  *       121     number       Double       e122
  *       122     number       Double       e123
  *       123     number       Double       e124
  *       124     number       Double       e125
  *       125     number       Double       e126
  *       126     number       Double       e127
  *       127     number       Double       e128
  *       128     number       Double       e129
  *       129     number       Double       e130
  *       130     number       Double       e131
  *       131     number       Double       e132
  *       132     number       Double       e133
  *       133     number       Double       e134
  *       134     number       Double       e135
  *       135     number       Double       e136
  *       136     number       Double       e137
  *       137     number       Double       e138
  *       138     number       Double       e139
  *       139     number       Double       e140
  *       140     number       Double       e141
  *       141     number       Double       e142
  *       142     number       Double       e143
  *       143     number       Double       e144
  *       144     number       Double       e145
  *       145     number       Double       e146
  *       146     number       Double       e147
  *       147     number       Double       e148
  *       148     number       Double       e149
  *       149     number       Double       e150
  *       150     number       Double       e151
  *       151     number       Double       e152
  *       152     number       Double       e153
  *       153     number       Double       e154
  *       154     number       Double       e155
  *       155     number       Double       e156
  *       156     number       Double       e157
  *       157     number       Double       e158
  *       158     number       Double       e159
  *       159     number       Double       e160
  *       160     number       Double       e161
  *       161     number       Double       e162
  *       162     number       Double       e163
  *       163     number       Double       e164
  *       164     number       Double       e165
  *       165     number       Double       e166
  *       166     number       Double       e167
  *       167     number       Double       e168
  *       168     number       Double       e169
  *       169     number       Double       e170
  *       170     number       Double       e171
  *       171     number       Double       e172
  *       172     number       Double       e173
  *       173     number       Double       e174
  *       174     number       Double       e175
  *       175     number       Double       e176
  *       176     number       Double       e177
  *       177     number       Double       e178
  *       178     number       Double       e179
  *       179     number       Double       e180
  *       180     number       Double       e181
  *       181     number       Double       e182
  *       182     number       Double       e183
  *       183     number       Double       e184
  *       184     number       Double       e185
  *       185     number       Double       e186
  *       186     number       Double       e187
  *       187     number       Double       e188
  *       188     number       Double       e189
  *       189     number       Double       e190
  *       190     number       Double       e191
  *       191     number       Double       e192
  *       192     number       Double       e193
  *       193     number       Double       e194
  *       194     number       Double       e195
  *       195     number       Double       e196
  *       196     number       Double       e197
  *       197     number       Double       e198
  *       198     number       Double       e199
  *       199     number       Double       e200
</pre>
     @return an array of scores correpsonding to the classes:
<pre>
  *           index       class name
  *          ------------------------
  *              0        non-sunsern
  *              1        sunsern
</pre>
  **/
  static public double[] predict(Object[] at) {
    attr = at;
    int i,j,a,n;
    StringTokenizer st;
    String s;
    Object v;
    Enumeration e;
    for (i = 0; i < num_text_attr; i++) {
      a = text_attr[i];
      if (!defined_attr(a))
        continue;
      Arrays.fill(tokens[a], false);
      try {
        s = (String) attr[a];
      }
      catch (ClassCastException ex) {
        throw new IllegalArgumentException
          ("Expected attribute " + a + " to be of type String");
      }
      st = new StringTokenizer(s);
      n = st.countTokens();
      String[] words = new String[n];
      for (j = 0; j < n; j++)
        words[j] = st.nextToken();
      for (j = 0; j < text_patterns[i].length; j++) {
        setPattern(words, text_patterns[i][j]);
        while(moreTokens())
          if ((v = hash.get(nextToken())) != null)
            tokens[a][((Integer) v).intValue()] = true;
      }
    }
    return predict_int();
  }

  /**
     Evaluates this classifier on an example represented by an array
     of Strings and returns an array of scores, one for each class.
     These Strings represent the values of the attributes similar
     to their representation in a data file.  Null pointers can be
     passed for undefined attributes.

     @param at an array of Objects corresponding to the attributes
                   specified in the spec file on which this classifier
		   was trained.  Specifically, these objects are:
<pre>
  *      index    attr.type    name
  *    ------------------------------------------
  *         0     number       e1
  *         1     number       e2
  *         2     number       e3
  *         3     number       e4
  *         4     number       e5
  *         5     number       e6
  *         6     number       e7
  *         7     number       e8
  *         8     number       e9
  *         9     number       e10
  *        10     number       e11
  *        11     number       e12
  *        12     number       e13
  *        13     number       e14
  *        14     number       e15
  *        15     number       e16
  *        16     number       e17
  *        17     number       e18
  *        18     number       e19
  *        19     number       e20
  *        20     number       e21
  *        21     number       e22
  *        22     number       e23
  *        23     number       e24
  *        24     number       e25
  *        25     number       e26
  *        26     number       e27
  *        27     number       e28
  *        28     number       e29
  *        29     number       e30
  *        30     number       e31
  *        31     number       e32
  *        32     number       e33
  *        33     number       e34
  *        34     number       e35
  *        35     number       e36
  *        36     number       e37
  *        37     number       e38
  *        38     number       e39
  *        39     number       e40
  *        40     number       e41
  *        41     number       e42
  *        42     number       e43
  *        43     number       e44
  *        44     number       e45
  *        45     number       e46
  *        46     number       e47
  *        47     number       e48
  *        48     number       e49
  *        49     number       e50
  *        50     number       e51
  *        51     number       e52
  *        52     number       e53
  *        53     number       e54
  *        54     number       e55
  *        55     number       e56
  *        56     number       e57
  *        57     number       e58
  *        58     number       e59
  *        59     number       e60
  *        60     number       e61
  *        61     number       e62
  *        62     number       e63
  *        63     number       e64
  *        64     number       e65
  *        65     number       e66
  *        66     number       e67
  *        67     number       e68
  *        68     number       e69
  *        69     number       e70
  *        70     number       e71
  *        71     number       e72
  *        72     number       e73
  *        73     number       e74
  *        74     number       e75
  *        75     number       e76
  *        76     number       e77
  *        77     number       e78
  *        78     number       e79
  *        79     number       e80
  *        80     number       e81
  *        81     number       e82
  *        82     number       e83
  *        83     number       e84
  *        84     number       e85
  *        85     number       e86
  *        86     number       e87
  *        87     number       e88
  *        88     number       e89
  *        89     number       e90
  *        90     number       e91
  *        91     number       e92
  *        92     number       e93
  *        93     number       e94
  *        94     number       e95
  *        95     number       e96
  *        96     number       e97
  *        97     number       e98
  *        98     number       e99
  *        99     number       e100
  *       100     number       e101
  *       101     number       e102
  *       102     number       e103
  *       103     number       e104
  *       104     number       e105
  *       105     number       e106
  *       106     number       e107
  *       107     number       e108
  *       108     number       e109
  *       109     number       e110
  *       110     number       e111
  *       111     number       e112
  *       112     number       e113
  *       113     number       e114
  *       114     number       e115
  *       115     number       e116
  *       116     number       e117
  *       117     number       e118
  *       118     number       e119
  *       119     number       e120
  *       120     number       e121
  *       121     number       e122
  *       122     number       e123
  *       123     number       e124
  *       124     number       e125
  *       125     number       e126
  *       126     number       e127
  *       127     number       e128
  *       128     number       e129
  *       129     number       e130
  *       130     number       e131
  *       131     number       e132
  *       132     number       e133
  *       133     number       e134
  *       134     number       e135
  *       135     number       e136
  *       136     number       e137
  *       137     number       e138
  *       138     number       e139
  *       139     number       e140
  *       140     number       e141
  *       141     number       e142
  *       142     number       e143
  *       143     number       e144
  *       144     number       e145
  *       145     number       e146
  *       146     number       e147
  *       147     number       e148
  *       148     number       e149
  *       149     number       e150
  *       150     number       e151
  *       151     number       e152
  *       152     number       e153
  *       153     number       e154
  *       154     number       e155
  *       155     number       e156
  *       156     number       e157
  *       157     number       e158
  *       158     number       e159
  *       159     number       e160
  *       160     number       e161
  *       161     number       e162
  *       162     number       e163
  *       163     number       e164
  *       164     number       e165
  *       165     number       e166
  *       166     number       e167
  *       167     number       e168
  *       168     number       e169
  *       169     number       e170
  *       170     number       e171
  *       171     number       e172
  *       172     number       e173
  *       173     number       e174
  *       174     number       e175
  *       175     number       e176
  *       176     number       e177
  *       177     number       e178
  *       178     number       e179
  *       179     number       e180
  *       180     number       e181
  *       181     number       e182
  *       182     number       e183
  *       183     number       e184
  *       184     number       e185
  *       185     number       e186
  *       186     number       e187
  *       187     number       e188
  *       188     number       e189
  *       189     number       e190
  *       190     number       e191
  *       191     number       e192
  *       192     number       e193
  *       193     number       e194
  *       194     number       e195
  *       195     number       e196
  *       196     number       e197
  *       197     number       e198
  *       198     number       e199
  *       199     number       e200
</pre>
     @return an array of scores correpsonding to the classes:
<pre>
  *           index       class name
  *          ------------------------
  *              0        non-sunsern
  *              1        sunsern
</pre>
  **/
  static public double[] predict(String[] as) {
    int j, a;
    Object v;
    Object[] attr = new Object[as.length];

    for (j = 0; j < real_attr.length; j++) {
      a = real_attr[j];
      try{ 
        attr[a] = (as[a] == null || as[a].trim().equals("")
                   ? null
                   : (new Double(as[a])));
      }
      catch (NumberFormatException e) {
        throw new IllegalArgumentException
             ("Expected attribute " + a + " to contain a String parsable as a double");
      }
    }
    for (j = 0; j < text_attr.length; j++) {
      a = text_attr[j];
      attr[a] = as[a];
    }
    for (j = 0; j < disc_attr.length; j++) {
      String s = null;
      a = disc_attr[j];
      if (as[a] == null || (s = as[a].trim()).equals(""))
        attr[a] = null;
      else if ((v = disc_val_map[j].get(s)) == null) {
        throw new IllegalArgumentException
             ("Illegal value for attribute " + a + ":" + s);
      } else
        attr[a] = ((Integer) v);
    }

    return predict(attr);
  }

  static private double[] predict_int() {
    reset_pred();
    add_pred(   /* R */
               8.804786400260794E-4);
    if (defined_attr(0)) {  /* R.0 */
      if (double_attr(0) <= -2.21124) {
        add_pred(   /* R.0:0 */
                   0.3794923663632256);
        if (defined_attr(6)) {  /* R.0:0.0 */
          if (double_attr(6) <= 9.3666485) {
            add_pred(   /* R.0:0.0:0 */
                       -0.3329972816508944);
            if (defined_attr(5)) {  /* R.0:0.0:0.0 */
              if (double_attr(5) <= -1.4933645) {
                add_pred(   /* R.0:0.0:0.0:0 */
                           -3.673579592259414);
              } else {
                add_pred(   /* R.0:0.0:0.0:1 */
                           0.31918411658905255);
                if (defined_attr(46)) {  /* R.0:0.0:0.0:1.0 */
                  if (double_attr(46) <= 0.065663) {
                    add_pred(   /* R.0:0.0:0.0:1.0:0 */
                               -0.7313114638271697);
                  } else {
                    add_pred(   /* R.0:0.0:0.0:1.0:1 */
                               0.9621407875571807);
                  }
                }
                if (defined_attr(11)) {  /* R.0:0.0:0.0:1.1 */
                  if (double_attr(11) <= 1.1436355) {
                    add_pred(   /* R.0:0.0:0.0:1.1:0 */
                               0.2241299077167764);
                    if (defined_attr(45)) {  /* R.0:0.0:0.0:1.1:0.0 */
                      if (double_attr(45) <= -2.6137935) {
                        add_pred(   /* R.0:0.0:0.0:1.1:0.0:0 */
                                   0.18177121820359168);
                        if (defined_attr(0)) {  /* R.0:0.0:0.0:1.1:0.0:0.0 */
                          if (double_attr(0) <= -10.9691395) {
                            add_pred(   /* R.0:0.0:0.0:1.1:0.0:0.0:0 */
                                       0.1566682092787617);
                            if (defined_attr(22)) {  /* R.0:0.0:0.0:1.1:0.0:0.0:0.0 */
                              if (double_attr(22) <= -5.731076) {
                                add_pred(   /* R.0:0.0:0.0:1.1:0.0:0.0:0.0:0 */
                                           -1.6354091628475194E-6);
                              } else {
                                add_pred(   /* R.0:0.0:0.0:1.1:0.0:0.0:0.0:1 */
                                           0.1446352253409679);
                              }
                            }
                          } else {
                            add_pred(   /* R.0:0.0:0.0:1.1:0.0:0.0:1 */
                                       -0.0011420731173685476);
                          }
                        }
                      } else {
                        add_pred(   /* R.0:0.0:0.0:1.1:0.0:1 */
                                   0.005705697729250892);
                      }
                    }
                  } else {
                    add_pred(   /* R.0:0.0:0.0:1.1:1 */
                               -0.15926011964493292);
                  }
                }
              }
            }
            if (defined_attr(9)) {  /* R.0:0.0:0.1 */
              if (double_attr(9) <= -5.965652) {
                add_pred(   /* R.0:0.0:0.1:0 */
                           1.0861393150107885);
                if (defined_attr(2)) {  /* R.0:0.0:0.1:0.0 */
                  if (double_attr(2) <= -9.908476499999999) {
                    add_pred(   /* R.0:0.0:0.1:0.0:0 */
                               -1.4701174794063756);
                  } else {
                    add_pred(   /* R.0:0.0:0.1:0.0:1 */
                               0.9872715639457599);
                    if (defined_attr(0)) {  /* R.0:0.0:0.1:0.0:1.0 */
                      if (double_attr(0) <= -17.585421) {
                        add_pred(   /* R.0:0.0:0.1:0.0:1.0:0 */
                                   1.4564610061853844);
                      } else {
                        add_pred(   /* R.0:0.0:0.1:0.0:1.0:1 */
                                   -0.7584951266505273);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.0:0.0:0.1:1 */
                           -0.9415559667274758);
                if (defined_attr(184)) {  /* R.0:0.0:0.1:1.0 */
                  if (double_attr(184) <= 1.5226155000000001) {
                    add_pred(   /* R.0:0.0:0.1:1.0:0 */
                               -0.8121676724662198);
                    if (defined_attr(15)) {  /* R.0:0.0:0.1:1.0:0.0 */
                      if (double_attr(15) <= 3.4555800000000003) {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.0:0 */
                                   -2.3593443218297736);
                      } else {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.0:1 */
                                   0.2330755219277336);
                      }
                    }
                    if (defined_attr(34)) {  /* R.0:0.0:0.1:1.0:0.1 */
                      if (double_attr(34) <= 0.360823) {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.1:0 */
                                   -1.9124293157637553);
                      } else {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.1:1 */
                                   0.48115631548254967);
                      }
                    }
                    if (defined_attr(52)) {  /* R.0:0.0:0.1:1.0:0.2 */
                      if (double_attr(52) <= -2.591076) {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.2:0 */
                                   0.8492016152511377);
                      } else {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.2:1 */
                                   -1.2017593029533185);
                        if (defined_attr(49)) {  /* R.0:0.0:0.1:1.0:0.2:1.0 */
                          if (double_attr(49) <= -4.735527) {
                            add_pred(   /* R.0:0.0:0.1:1.0:0.2:1.0:0 */
                                       0.08431396059240324);
                          } else {
                            add_pred(   /* R.0:0.0:0.1:1.0:0.2:1.0:1 */
                                       -0.7407651302378464);
                          }
                        }
                      }
                    }
                    if (defined_attr(75)) {  /* R.0:0.0:0.1:1.0:0.3 */
                      if (double_attr(75) <= 1.1972225) {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.3:0 */
                                   -0.5718225230543225);
                        if (defined_attr(84)) {  /* R.0:0.0:0.1:1.0:0.3:0.0 */
                          if (double_attr(84) <= 1.907887) {
                            add_pred(   /* R.0:0.0:0.1:1.0:0.3:0.0:0 */
                                       -0.48172035551489056);
                          } else {
                            add_pred(   /* R.0:0.0:0.1:1.0:0.3:0.0:1 */
                                       0.02565384264934164);
                          }
                        }
                      } else {
                        add_pred(   /* R.0:0.0:0.1:1.0:0.3:1 */
                                   0.3146277075089867);
                      }
                    }
                  } else {
                    add_pred(   /* R.0:0.0:0.1:1.0:1 */
                               1.5867047823634668);
                  }
                }
                if (defined_attr(166)) {  /* R.0:0.0:0.1:1.1 */
                  if (double_attr(166) <= -0.4298755) {
                    add_pred(   /* R.0:0.0:0.1:1.1:0 */
                               0.7561056175415655);
                  } else {
                    add_pred(   /* R.0:0.0:0.1:1.1:1 */
                               -1.2253570053467515);
                  }
                }
                if (defined_attr(163)) {  /* R.0:0.0:0.1:1.2 */
                  if (double_attr(163) <= -1.5910730000000002) {
                    add_pred(   /* R.0:0.0:0.1:1.2:0 */
                               0.246472929774452);
                  } else {
                    add_pred(   /* R.0:0.0:0.1:1.2:1 */
                               -0.24694429759182066);
                  }
                }
              }
            }
            if (defined_attr(22)) {  /* R.0:0.0:0.2 */
              if (double_attr(22) <= -2.6184909999999997) {
                add_pred(   /* R.0:0.0:0.2:0 */
                           -2.6931289139107437);
                if (defined_attr(0)) {  /* R.0:0.0:0.2:0.0 */
                  if (double_attr(0) <= -29.546293000000002) {
                    add_pred(   /* R.0:0.0:0.2:0.0:0 */
                               0.35366206080039764);
                  } else {
                    add_pred(   /* R.0:0.0:0.2:0.0:1 */
                               -1.2328454113753022);
                  }
                }
              } else {
                add_pred(   /* R.0:0.0:0.2:1 */
                           0.22362028491792932);
                if (defined_attr(21)) {  /* R.0:0.0:0.2:1.0 */
                  if (double_attr(21) <= -3.1616085) {
                    add_pred(   /* R.0:0.0:0.2:1.0:0 */
                               1.1612297026498557);
                    if (defined_attr(8)) {  /* R.0:0.0:0.2:1.0:0.0 */
                      if (double_attr(8) <= 1.9459339999999998) {
                        add_pred(   /* R.0:0.0:0.2:1.0:0.0:0 */
                                   1.3332655919972156);
                        if (defined_attr(5)) {  /* R.0:0.0:0.2:1.0:0.0:0.0 */
                          if (double_attr(5) <= -3.1580660000000003) {
                            add_pred(   /* R.0:0.0:0.2:1.0:0.0:0.0:0 */
                                       -0.010870204161087001);
                          } else {
                            add_pred(   /* R.0:0.0:0.2:1.0:0.0:0.0:1 */
                                       0.23199674260164682);
                            if (defined_attr(0)) {  /* R.0:0.0:0.2:1.0:0.0:0.0:1.0 */
                              if (double_attr(0) <= -7.235932) {
                                add_pred(   /* R.0:0.0:0.2:1.0:0.0:0.0:1.0:0 */
                                           0.19934991378913558);
                              } else {
                                add_pred(   /* R.0:0.0:0.2:1.0:0.0:0.0:1.0:1 */
                                           -4.0745077147337944E-4);
                              }
                            }
                          }
                        }
                      } else {
                        add_pred(   /* R.0:0.0:0.2:1.0:0.0:1 */
                                   -0.018995638413778944);
                      }
                    }
                  } else {
                    add_pred(   /* R.0:0.0:0.2:1.0:1 */
                               -0.48923384897858274);
                    if (defined_attr(0)) {  /* R.0:0.0:0.2:1.0:1.0 */
                      if (double_attr(0) <= -16.064039) {
                        add_pred(   /* R.0:0.0:0.2:1.0:1.0:0 */
                                   0.579472531660145);
                      } else {
                        add_pred(   /* R.0:0.0:0.2:1.0:1.0:1 */
                                   -1.657089829431789);
                      }
                    }
                  }
                }
              }
            }
          } else {
            add_pred(   /* R.0:0.0:1 */
                       1.2826879282457964);
            if (defined_attr(20)) {  /* R.0:0.0:1.0 */
              if (double_attr(20) <= 0.0780245) {
                add_pred(   /* R.0:0.0:1.0:0 */
                           -0.9698592407463823);
                if (defined_attr(5)) {  /* R.0:0.0:1.0:0.0 */
                  if (double_attr(5) <= 0.8184175) {
                    add_pred(   /* R.0:0.0:1.0:0.0:0 */
                               -2.3878551758010773);
                  } else {
                    add_pred(   /* R.0:0.0:1.0:0.0:1 */
                               0.246718394934034);
                    if (defined_attr(4)) {  /* R.0:0.0:1.0:0.0:1.0 */
                      if (double_attr(4) <= 2.2696484999999997) {
                        add_pred(   /* R.0:0.0:1.0:0.0:1.0:0 */
                                   1.146895094004128);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:0.0:1.0:1 */
                                   -1.5947474652414506);
                      }
                    }
                  }
                }
                if (defined_attr(24)) {  /* R.0:0.0:1.0:0.1 */
                  if (double_attr(24) <= -2.7392054999999997) {
                    add_pred(   /* R.0:0.0:1.0:0.1:0 */
                               0.42058746227018967);
                    if (defined_attr(1)) {  /* R.0:0.0:1.0:0.1:0.0 */
                      if (double_attr(1) <= -4.539079) {
                        add_pred(   /* R.0:0.0:1.0:0.1:0.0:0 */
                                   -0.7504299089425974);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:0.1:0.0:1 */
                                   1.1135243220404525);
                      }
                    }
                  } else {
                    add_pred(   /* R.0:0.0:1.0:0.1:1 */
                               -1.6161599679729044);
                    if (defined_attr(0)) {  /* R.0:0.0:1.0:0.1:1.0 */
                      if (double_attr(0) <= -27.6803185) {
                        add_pred(   /* R.0:0.0:1.0:0.1:1.0:0 */
                                   1.1487396874270572);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:0.1:1.0:1 */
                                   -2.3839798357325956);
                      }
                    }
                  }
                }
              } else {
                add_pred(   /* R.0:0.0:1.0:1 */
                           1.4185230343733248);
                if (defined_attr(12)) {  /* R.0:0.0:1.0:1.0 */
                  if (double_attr(12) <= -0.42779449999999997) {
                    add_pred(   /* R.0:0.0:1.0:1.0:0 */
                               3.283822654538893);
                  } else {
                    add_pred(   /* R.0:0.0:1.0:1.0:1 */
                               0.11699583542133007);
                    if (defined_attr(18)) {  /* R.0:0.0:1.0:1.0:1.0 */
                      if (double_attr(18) <= -2.4911814999999997) {
                        add_pred(   /* R.0:0.0:1.0:1.0:1.0:0 */
                                   -1.7549728810109304);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:1.0:1.0:1 */
                                   0.9335158028445624);
                      }
                    }
                    if (defined_attr(1)) {  /* R.0:0.0:1.0:1.0:1.1 */
                      if (double_attr(1) <= 6.1246244999999995) {
                        add_pred(   /* R.0:0.0:1.0:1.0:1.1:0 */
                                   -1.0269496699549898);
                        if (defined_attr(3)) {  /* R.0:0.0:1.0:1.0:1.1:0.0 */
                          if (double_attr(3) <= -10.054497) {
                            add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:0 */
                                       1.1383195308763912);
                          } else {
                            add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:1 */
                                       -1.4479406679117584);
                            if (defined_attr(85)) {  /* R.0:0.0:1.0:1.0:1.1:0.0:1.0 */
                              if (double_attr(85) <= -1.647445) {
                                add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:1.0:0 */
                                           0.5848740420335303);
                              } else {
                                add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:1.0:1 */
                                           -1.3156187929431327);
                              }
                            }
                            if (defined_attr(4)) {  /* R.0:0.0:1.0:1.0:1.1:0.0:1.1 */
                              if (double_attr(4) <= -10.362268) {
                                add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:1.1:0 */
                                           0.048230289486730187);
                              } else {
                                add_pred(   /* R.0:0.0:1.0:1.0:1.1:0.0:1.1:1 */
                                           -0.6481707561589719);
                              }
                            }
                          }
                        }
                      } else {
                        add_pred(   /* R.0:0.0:1.0:1.0:1.1:1 */
                                   1.3890811618843835);
                      }
                    }
                  }
                }
                if (defined_attr(9)) {  /* R.0:0.0:1.0:1.1 */
                  if (double_attr(9) <= -3.053276) {
                    add_pred(   /* R.0:0.0:1.0:1.1:0 */
                               1.7744463792148046);
                  } else {
                    add_pred(   /* R.0:0.0:1.0:1.1:1 */
                               -0.03416001719869241);
                    if (defined_attr(2)) {  /* R.0:0.0:1.0:1.1:1.0 */
                      if (double_attr(2) <= 8.2370005) {
                        add_pred(   /* R.0:0.0:1.0:1.1:1.0:0 */
                                   0.9066198940026319);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:1.1:1.0:1 */
                                   -0.8862435101600955);
                        if (defined_attr(163)) {  /* R.0:0.0:1.0:1.1:1.0:1.0 */
                          if (double_attr(163) <= -1.224819) {
                            add_pred(   /* R.0:0.0:1.0:1.1:1.0:1.0:0 */
                                       0.14767219099598786);
                          } else {
                            add_pred(   /* R.0:0.0:1.0:1.1:1.0:1.0:1 */
                                       -0.5028927902124347);
                          }
                        }
                      }
                    }
                    if (defined_attr(17)) {  /* R.0:0.0:1.0:1.1:1.1 */
                      if (double_attr(17) <= -3.137019) {
                        add_pred(   /* R.0:0.0:1.0:1.1:1.1:0 */
                                   0.21453230880550525);
                      } else {
                        add_pred(   /* R.0:0.0:1.0:1.1:1.1:1 */
                                   -0.20239543731498166);
                      }
                    }
                  }
                }
                if (defined_attr(60)) {  /* R.0:0.0:1.0:1.2 */
                  if (double_attr(60) <= 0.22728500000000001) {
                    add_pred(   /* R.0:0.0:1.0:1.2:0 */
                               0.7626158958934199);
                  } else {
                    add_pred(   /* R.0:0.0:1.0:1.2:1 */
                               -0.10847951489209567);
                  }
                }
                if (defined_attr(3)) {  /* R.0:0.0:1.0:1.3 */
                  if (double_attr(3) <= -9.4277295) {
                    add_pred(   /* R.0:0.0:1.0:1.3:0 */
                               0.4323485854079764);
                  } else {
                    add_pred(   /* R.0:0.0:1.0:1.3:1 */
                               0.0010352704324640485);
                  }
                }
              }
            }
          }
        }
        if (defined_attr(116)) {  /* R.0:0.1 */
          if (double_attr(116) <= -0.757007) {
            add_pred(   /* R.0:0.1:0 */
                       0.6339634623333692);
          } else {
            add_pred(   /* R.0:0.1:1 */
                       -0.3565163739449576);
          }
        }
      } else {
        add_pred(   /* R.0:1 */
                   -2.3670988726224174);
        if (defined_attr(16)) {  /* R.0:1.0 */
          if (double_attr(16) <= 7.3661255) {
            add_pred(   /* R.0:1.0:0 */
                       -1.9420751710962716);
          } else {
            add_pred(   /* R.0:1.0:1 */
                       1.411945511919496);
          }
        }
        if (defined_attr(14)) {  /* R.0:1.1 */
          if (double_attr(14) <= -12.470227999999999) {
            add_pred(   /* R.0:1.1:0 */
                       1.7353512455193454);
          } else {
            add_pred(   /* R.0:1.1:1 */
                       -2.0015432477489745);
          }
        }
        if (defined_attr(168)) {  /* R.0:1.2 */
          if (double_attr(168) <= 1.208242) {
            add_pred(   /* R.0:1.2:0 */
                       -1.0228274684175156);
          } else {
            add_pred(   /* R.0:1.2:1 */
                       1.1146988179725656);
          }
        }
        if (defined_attr(29)) {  /* R.0:1.3 */
          if (double_attr(29) <= 6.5530265) {
            add_pred(   /* R.0:1.3:0 */
                       -0.7154842434140052);
          } else {
            add_pred(   /* R.0:1.3:1 */
                       0.6942185945819199);
          }
        }
        if (defined_attr(66)) {  /* R.0:1.4 */
          if (double_attr(66) <= 3.2431245) {
            add_pred(   /* R.0:1.4:0 */
                       -0.1647297952440583);
          } else {
            add_pred(   /* R.0:1.4:1 */
                       0.044034040994501845);
          }
        }
      }
    }
    if (defined_attr(0)) {  /* R.1 */
      if (double_attr(0) <= -11.2723115) {
        add_pred(   /* R.1:0 */
                   0.6222650984499335);
        if (defined_attr(42)) {  /* R.1:0.0 */
          if (double_attr(42) <= -3.0504550000000004) {
            add_pred(   /* R.1:0.0:0 */
                       -0.7557012823856473);
          } else {
            add_pred(   /* R.1:0.0:1 */
                       0.2541868752140843);
            if (defined_attr(22)) {  /* R.1:0.0:1.0 */
              if (double_attr(22) <= 1.228796) {
                add_pred(   /* R.1:0.0:1.0:0 */
                           -0.30745633197844807);
              } else {
                add_pred(   /* R.1:0.0:1.0:1 */
                           0.5263904869819844);
                if (defined_attr(9)) {  /* R.1:0.0:1.0:1.0 */
                  if (double_attr(9) <= -2.05529) {
                    add_pred(   /* R.1:0.0:1.0:1.0:0 */
                               0.4879454000144267);
                    if (defined_attr(8)) {  /* R.1:0.0:1.0:1.0:0.0 */
                      if (double_attr(8) <= 5.4515995) {
                        add_pred(   /* R.1:0.0:1.0:1.0:0.0:0 */
                                   0.3448054290359765);
                        if (defined_attr(5)) {  /* R.1:0.0:1.0:1.0:0.0:0.0 */
                          if (double_attr(5) <= -2.9346200000000002) {
                            add_pred(   /* R.1:0.0:1.0:1.0:0.0:0.0:0 */
                                       -1.9137811841945452E-4);
                          } else {
                            add_pred(   /* R.1:0.0:1.0:1.0:0.0:0.0:1 */
                                       0.6257470914294461);
                          }
                        }
                      } else {
                        add_pred(   /* R.1:0.0:1.0:1.0:0.0:1 */
                                   -0.011422742315289634);
                      }
                    }
                  } else {
                    add_pred(   /* R.1:0.0:1.0:1.0:1 */
                               -0.029160764008399027);
                  }
                }
              }
            }
          }
        }
      } else {
        add_pred(   /* R.1:1 */
                   -1.0830563677945726);
        if (defined_attr(6)) {  /* R.1:1.0 */
          if (double_attr(6) <= 14.394103000000001) {
            add_pred(   /* R.1:1.0:0 */
                       -2.435746609885816);
            if (defined_attr(185)) {  /* R.1:1.0:0.0 */
              if (double_attr(185) <= -4.2303295) {
                add_pred(   /* R.1:1.0:0.0:0 */
                           0.16228343115233876);
              } else {
                add_pred(   /* R.1:1.0:0.0:1 */
                           -0.7014466500571276);
              }
            }
          } else {
            add_pred(   /* R.1:1.0:1 */
                       0.38556018318069407);
            if (defined_attr(20)) {  /* R.1:1.0:1.0 */
              if (double_attr(20) <= -1.0017395) {
                add_pred(   /* R.1:1.0:1.0:0 */
                           -1.7739577897254488);
              } else {
                add_pred(   /* R.1:1.0:1.0:1 */
                           1.2474098696664542);
              }
            }
          }
        }
      }
    }
    if (defined_attr(0)) {  /* R.2 */
      if (double_attr(0) <= -28.367852499999998) {
        add_pred(   /* R.2:0 */
                   3.0727701069658093);
      } else {
        add_pred(   /* R.2:1 */
                   -0.08570193515006486);
        if (defined_attr(9)) {  /* R.2:1.0 */
          if (double_attr(9) <= 7.2744254999999995) {
            add_pred(   /* R.2:1.0:0 */
                       0.1679663395984914);
          } else {
            add_pred(   /* R.2:1.0:1 */
                       -1.5647221875889297);
          }
        }
        if (defined_attr(62)) {  /* R.2:1.1 */
          if (double_attr(62) <= -0.2995015) {
            add_pred(   /* R.2:1.1:0 */
                       0.18352585970243956);
          } else {
            add_pred(   /* R.2:1.1:1 */
                       -0.6016177329584992);
            if (defined_attr(20)) {  /* R.2:1.1:1.0 */
              if (double_attr(20) <= -1.5606084999999998) {
                add_pred(   /* R.2:1.1:1.0:0 */
                           -0.8827151625591385);
              } else {
                add_pred(   /* R.2:1.1:1.0:1 */
                           -0.05296664752013179);
              }
            }
          }
        }
        if (defined_attr(6)) {  /* R.2:1.2 */
          if (double_attr(6) <= 21.3733725) {
            add_pred(   /* R.2:1.2:0 */
                       -0.3550225998186673);
            if (defined_attr(5)) {  /* R.2:1.2:0.0 */
              if (double_attr(5) <= -8.019207999999999) {
                add_pred(   /* R.2:1.2:0.0:0 */
                           -0.33902303362997666);
              } else {
                add_pred(   /* R.2:1.2:0.0:1 */
                           -0.12608648703420483);
              }
            }
            if (defined_attr(160)) {  /* R.2:1.2:0.1 */
              if (double_attr(160) <= -2.184277) {
                add_pred(   /* R.2:1.2:0.1:0 */
                           0.2263485949318919);
              } else {
                add_pred(   /* R.2:1.2:0.1:1 */
                           -0.2580563120797231);
                if (defined_attr(5)) {  /* R.2:1.2:0.1:1.0 */
                  if (double_attr(5) <= -7.9486485) {
                    add_pred(   /* R.2:1.2:0.1:1.0:0 */
                               -0.1880140681940916);
                  } else {
                    add_pred(   /* R.2:1.2:0.1:1.0:1 */
                               -0.12676582612094328);
                  }
                }
                if (defined_attr(17)) {  /* R.2:1.2:0.1:1.1 */
                  if (double_attr(17) <= 7.5092315) {
                    add_pred(   /* R.2:1.2:0.1:1.1:0 */
                               -0.09451033435987458);
                  } else {
                    add_pred(   /* R.2:1.2:0.1:1.1:1 */
                               -0.17206180764517492);
                  }
                }
                if (defined_attr(178)) {  /* R.2:1.2:0.1:1.2 */
                  if (double_attr(178) <= 1.618163) {
                    add_pred(   /* R.2:1.2:0.1:1.2:0 */
                               -0.23199536542108484);
                    if (defined_attr(9)) {  /* R.2:1.2:0.1:1.2:0.0 */
                      if (double_attr(9) <= -1.620807) {
                        add_pred(   /* R.2:1.2:0.1:1.2:0.0:0 */
                                   0.035050558142914155);
                      } else {
                        add_pred(   /* R.2:1.2:0.1:1.2:0.0:1 */
                                   -0.2511265976761712);
                        if (defined_attr(42)) {  /* R.2:1.2:0.1:1.2:0.0:1.0 */
                          if (double_attr(42) <= -0.707642) {
                            add_pred(   /* R.2:1.2:0.1:1.2:0.0:1.0:0 */
                                       -0.42681923132762656);
                          } else {
                            add_pred(   /* R.2:1.2:0.1:1.2:0.0:1.0:1 */
                                       -0.16601862403870732);
                          }
                        }
                      }
                    }
                  } else {
                    add_pred(   /* R.2:1.2:0.1:1.2:1 */
                               0.11246677794649432);
                  }
                }
              }
            }
          } else {
            add_pred(   /* R.2:1.2:1 */
                       0.3027443212814953);
          }
        }
      }
    }
    if (defined_attr(7)) {  /* R.3 */
      if (double_attr(7) <= 5.9224125) {
        add_pred(   /* R.3:0 */
                   0.2365404081594462);
        if (defined_attr(2)) {  /* R.3:0.0 */
          if (double_attr(2) <= -18.9286705) {
            add_pred(   /* R.3:0.0:0 */
                       -0.6624131517171801);
          } else {
            add_pred(   /* R.3:0.0:1 */
                       0.21030623458623596);
            if (defined_attr(5)) {  /* R.3:0.0:1.0 */
              if (double_attr(5) <= -10.556309500000001) {
                add_pred(   /* R.3:0.0:1.0:0 */
                           -0.5311249313018616);
              } else {
                add_pred(   /* R.3:0.0:1.0:1 */
                           0.2748753321342874);
                if (defined_attr(4)) {  /* R.3:0.0:1.0:1.0 */
                  if (double_attr(4) <= 2.3005180000000003) {
                    add_pred(   /* R.3:0.0:1.0:1.0:0 */
                               0.501258939424508);
                    if (defined_attr(13)) {  /* R.3:0.0:1.0:1.0:0.0 */
                      if (double_attr(13) <= 6.541447) {
                        add_pred(   /* R.3:0.0:1.0:1.0:0.0:0 */
                                   0.4306065238204402);
                        if (defined_attr(86)) {  /* R.3:0.0:1.0:1.0:0.0:0.0 */
                          if (double_attr(86) <= -2.7841195) {
                            add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:0 */
                                       -0.16018566305969395);
                          } else {
                            add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1 */
                                       0.44373884165590366);
                            if (defined_attr(6)) {  /* R.3:0.0:1.0:1.0:0.0:0.0:1.0 */
                              if (double_attr(6) <= -8.5911445) {
                                add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:0 */
                                           -0.04705190111898933);
                              } else {
                                add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1 */
                                           0.3832849936076983);
                                if (defined_attr(9)) {  /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.0 */
                                  if (double_attr(9) <= -7.158034000000001) {
                                    add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.0:0 */
                                               0.2899477130047824);
                                  } else {
                                    add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.0:1 */
                                               0.2977736296358634);
                                  }
                                }
                                if (defined_attr(9)) {  /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.1 */
                                  if (double_attr(9) <= 8.223502499999999) {
                                    add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.1:0 */
                                               0.2237827136232245);
                                  } else {
                                    add_pred(   /* R.3:0.0:1.0:1.0:0.0:0.0:1.0:1.1:1 */
                                               -0.023827021373953962);
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        add_pred(   /* R.3:0.0:1.0:1.0:0.0:1 */
                                   -0.2807704107987121);
                      }
                    }
                  } else {
                    add_pred(   /* R.3:0.0:1.0:1.0:1 */
                               -0.3050240383472434);
                  }
                }
              }
            }
          }
        }
      } else {
        add_pred(   /* R.3:1 */
                   -0.7482313958988859);
        if (defined_attr(11)) {  /* R.3:1.0 */
          if (double_attr(11) <= -1.6598975) {
            add_pred(   /* R.3:1.0:0 */
                       0.19452426128346442);
          } else {
            add_pred(   /* R.3:1.0:1 */
                       -0.3851198001351184);
          }
        }
      }
    }

    return finalize_pred();
  }
  static private String[] keys = {
  };
  static private final int num_keys = 0;
  static private boolean[][] tokens = new boolean[1][];
  static private int text_attr[] = {  };
  static private final int num_text_attr = 0;
  static private boolean[][][] text_patterns = {
  };
  static private int real_attr[] = {0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,20,21,22,24,29,34,42,45,46,49,52,60,62,66,75,84,85,86,116,160,163,166,168,178,184,185,  };
  static private int disc_attr[] = {  };
  static private Object[] attr;
  static private Map hash = null;
  static private Map[] disc_val_map = null;
  static private String[][] disc_attr_vals = {
  };

  static {
    disc_val_map = new Map[disc_attr.length];
    for (int i = 0; i < disc_attr.length; i++) {
      disc_val_map[i] = new TreeMap();
      for (int j = 0; j < disc_attr_vals[i].length; j++)
        disc_val_map[i].put(disc_attr_vals[i][j], new Integer(j));
    }
  }

  static {
    if (hash == null) {
      hash = new HashMap();
      for (int i = 0; i < num_keys; i++)
        hash.put(keys[i], new Integer(i));
    }
  }

  static{
    for (int i = 0; i < num_text_attr; i++)
      tokens[text_attr[i]] = new boolean[num_keys];
  }

  static private boolean defined_attr(int i) {
    return (attr[i] != null);
  }

  static private double double_attr(int i) {
    double r;
    try {
      r = ((Double) attr[i]).doubleValue();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException
        ("Expected attribute " + i + " to be of type Double");
    }
    return r;
  }

  static private int int_attr(int i) {
    int r;
    try {
      r = ((Integer) attr[i]).intValue();
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException
        ("Expected attribute " + i + " to be of type Integer");
    }
    return r;
  }

  static private boolean attr_contains_token(int i, int k) {
    return tokens[i][k];
  }

  static private int cur_word = 0;
  static private String[] words = null;
  static private boolean[] pattern = null;
  static private String prepend = "";
  static private final String[] prependChar = {"0", "1"};

  static private void setPattern(String[] m_w, boolean[] pat) {
    words = m_w;
    pattern = pat;
    cur_word = 0;
    prepend = "";
    for (int i = 0; i < pattern.length; i++)
      prepend += prependChar[pattern[i] ? 1 : 0];
  }

  static private boolean moreTokens() {
    return (cur_word <= words.length - pattern.length);
  }

  static private String nextToken() {
    if (!moreTokens())
      throw new NoSuchElementException();
    String r = prepend;
    for (int i = 0; i < pattern.length; i++) {
      if (pattern[i])
        r += " " + words[cur_word + i];
    }
    cur_word++;
    return r;
  }

  static private double p;
  static private void reset_pred() { p = 0.0; }
  static private void add_pred(double x) { p += x; }
  static private double[] finalize_pred() {
    return new double[] {-p, p};
  }

}

